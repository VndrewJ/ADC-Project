#include <avr/interrupt.h>
volatile uint8_t state;
volatile uint8_t onOrOff;
volatile uint8_t timer;

// The CTC interrupt, triggered at OCR1A matching
ISR(TIMER1_COMPA_vect) {
  timer = !timer;
}
// External interrupt INT0
ISR(INT0_vect) {
  if (onOrOff == 1) {
    state = !state;
  }
}
// External interrupt INT1
ISR(INT1_vect) {
  onOrOff = !onOrOff;
}
int main(void) {
  // Configure I/O using DDRB and DDRD (reuse Task 1)
  cli();  // Disable all interrupts during configuration
  // Configure external interrupts using EICRA and EIMSK (reuse Task 1)


  DDRB |= (1 << PIN0) | (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
  DDRD &= ~(1 << PIN2);
  DDRD &= ~(1 << PIN3);

  EIMSK |= (1 << INT0) | (1 << INT1);
  EICRA |= (1 << ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);



  // Step 2-5: configure timer interrupt related registers
  TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);  // Set the timer to CTC mode and prescaler to 1024 -
  // see Datasheet Table 15-5 and 15-6

  TCNT1 = 0;                // Initialize timer to 0
  OCR1A = 7812;             // Set CTC compare value
  TIMSK1 |= (1 << OCIE1A);  // Enable CTC interrupt for OCR1A compare match

  state = 1;
  onOrOff = 1;
  timer = 1;

  sei();  // Enable all interrupts

  while (1) {

    if (onOrOff == 1) {

      if (state == 1) {

        if (timer == 1) {
          PORTB |= (1 << PB1);
          PORTB &= ~(1 << PB3);
        } else {
          PORTB |= (1 << PB3);
          PORTB &= ~(1 << PB1);
        }

      } else {

        if (timer == 1){
        PORTB |= (1 << PB1);
        PORTB |= (1 << PB3);
        } else {
        PORTB &= ~(1 << PB3);
        PORTB &= ~(1 << PB1);
        }
      }
    } else {

      PORTB &= ~(1 << PB3);
      PORTB &= ~(1 << PB1);
    }
  }
}
